{"ast":null,"code":"var _jsxFileName = \"/home/mauro/Escritorio/React/react-tasks/client/src/context/tasks/taskState.js\";\nimport React, { useReducer } from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport { PROJECT_TASKS, NEW_TASK, VALIDATE_TASK, DELETE_TASK, TASK_STATUS, ACTUAL_TASK, UPDATE_TASK } from '../../types';\nimport axiosClient from '../../config/axios';\n\nconst TaskState = props => {\n  const initialState = {\n    projectTasks: [],\n    taskError: false,\n    actualTask: null\n  };\n  const [state, dispatch] = useReducer(TaskReducer, initialState);\n\n  const getProjectTasks = projectId => {\n    dispatch({\n      type: PROJECT_TASKS,\n      payload: projectId\n    });\n  };\n\n  const newTask = async task => {\n    try {\n      const response = await axiosClient.post('/api/tasks', task);\n      dispatch({\n        type: NEW_TASK,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const validateTask = () => {\n    dispatch({\n      type: VALIDATE_TASK\n    });\n  };\n\n  const deleteTask = id => {\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  };\n\n  const changeTaskStatus = task => {\n    dispatch({\n      type: TASK_STATUS,\n      payload: task\n    });\n  };\n\n  const getActualTask = task => {\n    dispatch({\n      type: ACTUAL_TASK,\n      payload: task\n    });\n  };\n\n  const updateTask = task => {\n    dispatch({\n      type: UPDATE_TASK,\n      payload: task\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(TaskContext.Provider, {\n    value: {\n      projectTasks: state.projectTasks,\n      taskError: state.taskError,\n      actualTask: state.actualTask,\n      getProjectTasks,\n      newTask,\n      validateTask,\n      deleteTask,\n      changeTaskStatus,\n      getActualTask,\n      updateTask\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default TaskState;","map":{"version":3,"sources":["/home/mauro/Escritorio/React/react-tasks/client/src/context/tasks/taskState.js"],"names":["React","useReducer","TaskContext","TaskReducer","PROJECT_TASKS","NEW_TASK","VALIDATE_TASK","DELETE_TASK","TASK_STATUS","ACTUAL_TASK","UPDATE_TASK","axiosClient","TaskState","props","initialState","projectTasks","taskError","actualTask","state","dispatch","getProjectTasks","projectId","type","payload","newTask","task","response","post","data","error","console","log","validateTask","deleteTask","id","changeTaskStatus","getActualTask","updateTask","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,aAAT,EACSC,QADT,EAESC,aAFT,EAGSC,WAHT,EAISC,WAJT,EAKSC,WALT,EAMSC,WANT,QAOe,aAPf;AAQA,OAAOC,WAAP,MAAwB,oBAAxB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAEvB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,YAAY,EAAE,EADG;AAEjBC,IAAAA,SAAS,EAAE,KAFM;AAGjBC,IAAAA,UAAU,EAAE;AAHK,GAArB;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,UAAU,CAACE,WAAD,EAAcW,YAAd,CAApC;;AAEA,QAAMM,eAAe,GAAGC,SAAS,IAAI;AACjCF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMG,OAAO,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMf,WAAW,CAACgB,IAAZ,CAAiB,YAAjB,EAA+BF,IAA/B,CAAvB;AACAN,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEjB,QADD;AAELkB,QAAAA,OAAO,EAAEG,QAAQ,CAACE;AAFb,OAAD,CAAR;AAIH,KAND,CAME,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAVD;;AAYA,QAAMG,YAAY,GAAG,MAAM;AACvBb,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEhB;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAM2B,UAAU,GAAGC,EAAE,IAAI;AACrBf,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEf,WADD;AAELgB,MAAAA,OAAO,EAAEW;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMC,gBAAgB,GAAGV,IAAI,IAAI;AAC7BN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEd,WADD;AAELe,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMW,aAAa,GAAGX,IAAI,IAAI;AAC1BN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEb,WADD;AAELc,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMY,UAAU,GAAGZ,IAAI,IAAI;AACvBN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEZ,WADD;AAELa,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,sBACI,oBAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHV,MAAAA,YAAY,EAAEG,KAAK,CAACH,YADjB;AAEHC,MAAAA,SAAS,EAAEE,KAAK,CAACF,SAFd;AAGHC,MAAAA,UAAU,EAAEC,KAAK,CAACD,UAHf;AAIHG,MAAAA,eAJG;AAKHI,MAAAA,OALG;AAMHQ,MAAAA,YANG;AAOHC,MAAAA,UAPG;AAQHE,MAAAA,gBARG;AASHC,MAAAA,aATG;AAUHC,MAAAA;AAVG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcKxB,KAAK,CAACyB,QAdX,CADJ;AAmBH,CAlFD;;AAoFA,eAAe1B,SAAf","sourcesContent":["import React, {useReducer} from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport { PROJECT_TASKS,\n         NEW_TASK, \n         VALIDATE_TASK, \n         DELETE_TASK,\n         TASK_STATUS,\n         ACTUAL_TASK,\n         UPDATE_TASK\n        } from '../../types';\nimport axiosClient from '../../config/axios';\n\nconst TaskState = props => {\n    \n    const initialState = {\n        projectTasks: [],\n        taskError: false, \n        actualTask: null\n    }\n\n    const [state, dispatch] = useReducer(TaskReducer, initialState);\n\n    const getProjectTasks = projectId => {\n        dispatch({\n            type: PROJECT_TASKS,\n            payload: projectId\n        })\n    }\n\n    const newTask = async task => {\n        try {\n            const response = await axiosClient.post('/api/tasks', task);\n            dispatch({\n                type: NEW_TASK,\n                payload: response.data\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const validateTask = () => {\n        dispatch({\n            type: VALIDATE_TASK\n        })\n    }\n\n    const deleteTask = id => {\n        dispatch({\n            type: DELETE_TASK,\n            payload: id\n        })\n    }\n\n    const changeTaskStatus = task => {\n        dispatch({\n            type: TASK_STATUS,\n            payload: task\n        })\n    }\n\n    const getActualTask = task => {\n        dispatch({\n            type: ACTUAL_TASK,\n            payload: task\n        })\n    }\n\n    const updateTask = task => {\n        dispatch({\n            type: UPDATE_TASK,\n            payload: task\n        })\n    }\n\n    return (\n        <TaskContext.Provider\n            value={{\n                projectTasks: state.projectTasks,\n                taskError: state.taskError,\n                actualTask: state.actualTask,\n                getProjectTasks,\n                newTask,\n                validateTask,\n                deleteTask,\n                changeTaskStatus,\n                getActualTask,\n                updateTask\n            }}\n        >\n            {props.children}\n        </TaskContext.Provider>\n    )\n\n}\n\nexport default TaskState;"]},"metadata":{},"sourceType":"module"}